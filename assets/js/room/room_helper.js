// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    var RoomHelper;
    RoomHelper = (function(_super) {

      __extends(RoomHelper, _super);

      function RoomHelper() {
        return RoomHelper.__super__.constructor.apply(this, arguments);
      }

      RoomHelper.prototype.initHotkeys = function() {
        var _this = this;
        if (isMac()) {
          $(document).bind('keydown.meta_z', function() {
            return _this.room().history.prev();
          });
          $(document).bind('keydown.meta_shift_z', function() {
            return _this.room().history.next();
          });
        } else {
          $(document).bind('keydown.ctrl_z', function() {
            return _this.room().history.prev();
          });
          $(document).bind('keydown.ctrl_shift_z', function() {
            return _this.room().history.next();
          });
        }
        $(document).bind('keydown.del', function() {
          return _this.room().items.removeSelected();
        });
        $(document).bind('keydown.backspace', function() {
          return _this.room().items.removeSelected();
        });
        $(document).bind('keydown.left', function() {
          return _this.room().items.translateSelected(new Point(-5, 0));
        });
        $(document).bind('keydown.up', function() {
          return _this.room().items.translateSelected(new Point(0, -5));
        });
        $(document).bind('keydown.right', function() {
          return _this.room().items.translateSelected(new Point(5, 0));
        });
        $(document).bind('keydown.down', function() {
          return _this.room().items.translateSelected(new Point(0, 5));
        });
        $(document).bind('keydown.shift_left', function() {
          return _this.room().items.translateSelected(new Point(-1, 0));
        });
        $(document).bind('keydown.shift_up', function() {
          return _this.room().items.translateSelected(new Point(0, -1));
        });
        $(document).bind('keydown.shift_right', function() {
          return _this.room().items.translateSelected(new Point(1, 0));
        });
        return $(document).bind('keydown.shift_down', function() {
          return _this.room().items.translateSelected(new Point(0, 1));
        });
      };

      RoomHelper.prototype.initUploader = function() {
        var uploader,
          _this = this;
        return uploader = new qq.FileUploader({
          element: $('#file-uploader')[0],
          action: '/file/upload',
          title_uploader: 'Upload',
          failed: 'Failed',
          multiple: true,
          cancel: 'Cancel',
          debug: false,
          params: {
            pid: $("#pid").val()
          },
          onSubmit: function(id, fileName) {
            return $(uploader._listElement).css('dispaly', 'none');
          },
          onComplete: function(id, fileName, responseJSON) {
            var image;
            $(uploader._listElement).css('dispaly', 'none');
            if (responseJSON.fileName) {
              image = new Image();
              image.src = "/images/avatar.png";
              return $(image).on("load", function() {
                return _this.room().canvas.handleUpload(image);
              });
            }
          }
        });
      };

      RoomHelper.prototype.reverseOpacity = function(elem) {
        if (elem.opacity === 0) {
          return elem.opacity = 1;
        } else {
          return elem.opacity = 0;
        }
      };

      RoomHelper.prototype.notifyComment = function() {
        return App.notificator.notify("Drag to comment an area.");
      };

      RoomHelper.prototype.elementInArrayContainsPoint = function(array, point) {
        var element, _i, _len;
        for (_i = 0, _len = array.length; _i < _len; _i++) {
          element = array[_i];
          if (element.bounds.contains(point)) {
            return element;
          }
        }
        return null;
      };

      RoomHelper.prototype.findByElementId = function(id) {
        var element, _i, _len, _ref;
        if (!id) {
          return null;
        }
        _ref = this.opts().historytools.allHistory;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          if (element.commentMin && element.commentMin.elementId === id) {
            return element;
          }
          if (element.elementId === id) {
            return element;
          }
        }
        return null;
      };

      return RoomHelper;

    })(App.RoomComponent);
    return App.room.helper = new RoomHelper;
  });

}).call(this);
