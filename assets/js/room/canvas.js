// Generated by CoffeeScript 1.4.0
(function() {

  $(function() {
    var RoomCanvas;
    RoomCanvas = (function() {

      function RoomCanvas() {}

      RoomCanvas.prototype.init = function() {
        this.initElements();
        this.initComments();
        return this.initThumbnails();
      };

      RoomCanvas.prototype.initElements = function() {
        var selectedCid;
        selectedCid = this.getSelectedCanvasId();
        return this.forEachThumbInContext(function(cid) {
          var canvasElements, element, path, rawElement, _i, _j, _len, _len1, _ref, _results;
          canvasElements = [];
          _ref = $(".canvasElement" + cid);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            rawElement = _ref[_i];
            canvasElements.push(JSON.parse($(rawElement).val()));
          }
          _results = [];
          for (_j = 0, _len1 = canvasElements.length; _j < _len1; _j++) {
            element = canvasElements[_j];
            path = room.socketHelper.createElementFromData(element);
            if (cid !== selectedCid) {
              room.helper.findById(path.id).remove();
            }
            path.strokeColor = element.strokeColor;
            path.strokeWidth = element.strokeWidth;
            path.opacity = element.opacity;
            path.eligible = false;
            _results.push(room.history.add(path));
          }
          return _results;
        });
      };

      RoomCanvas.prototype.initComments = function() {
        var selectedCid;
        selectedCid = this.getSelectedCanvasId();
        return this.forEachThumbInContext(function(cid) {
          var canvasComments, comment, createdComment, rawComment, text, texts, _i, _j, _len, _len1, _ref, _results;
          canvasComments = [];
          _ref = $(".canvasComment" + cid);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            rawComment = _ref[_i];
            canvasComments.push(JSON.parse($(rawComment).val()));
          }
          _results = [];
          for (_j = 0, _len1 = canvasComments.length; _j < _len1; _j++) {
            comment = canvasComments[_j];
            texts = JSON.parse($("#commentTexts" + comment.elementId).val());
            createdComment = room.socketHelper.createCommentFromData(comment);
            if (cid !== selectedCid) {
              room.comments.hideComment(createdComment);
            }
            _results.push((function() {
              var _k, _len2, _results1;
              _results1 = [];
              for (_k = 0, _len2 = texts.length; _k < _len2; _k++) {
                text = texts[_k];
                _results1.push(room.comments.addCommentText(createdComment, text.text, text.elementId));
              }
              return _results1;
            })());
          }
          return _results;
        });
      };

      RoomCanvas.prototype.initThumbnails = function() {
        var selectedCid,
          _this = this;
        selectedCid = this.getSelectedCanvasId();
        return this.forEachThumbInContext(function(cid, fid) {
          return _this.addImage(fid, function(raster, executeLoadImage) {
            executeLoadImage();
            if (cid !== selectedCid && opts.image.id !== raster.id) {
              room.helper.findById(raster.id).remove();
            }
            return _this.updateThumb(cid);
          });
        });
      };

      RoomCanvas.prototype.forEachThumbInContext = function(fn) {
        var cid, fid, opts, selectedCid, selectedOpts, thumb, _i, _len, _ref;
        selectedCid = this.getSelectedCanvasId();
        _ref = this.getThumbs();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          thumb = _ref[_i];
          cid = $(thumb).data("cid");
          fid = $(thumb).data("fid");
          opts = this.findCanvasOptsById(cid);
          if (opts) {
            room.setOpts(opts);
          } else {
            room.initOpts(cid);
          }
          fn(cid, fid);
        }
        selectedOpts = this.findCanvasOptsById(selectedCid);
        return room.setOpts(selectedOpts);
      };

      RoomCanvas.prototype.clear = function() {
        var element, _i, _len, _ref;
        room.history.add({
          type: "clear",
          tools: room.history.getSelectableTools(),
          eligible: true
        });
        _ref = opts.historytools.allHistory;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          if (!element.type) {
            element.opacity = 0;
          }
          if (element.commentMin) {
            room.comments.hideComment(element.commentMin);
          }
        }
        room.items.unselect();
        room.redrawWithThumb();
        return room.socket.emit("eraseCanvas");
      };

      RoomCanvas.prototype.erase = function() {
        var element, _i, _len, _ref;
        _ref = opts.historytools.allHistory;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          if (!element.type) {
            element.remove();
          }
          if (element.commentMin) {
            room.comments.hideComment(element.commentMin);
          }
        }
        return room.redraw();
      };

      RoomCanvas.prototype.clearCopyCanvas = function() {
        var child, item, itemsToRemove, _i, _j, _len, _len1, _ref, _results;
        itemsToRemove = [];
        _ref = paper.projects[0].activeLayer.children;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          itemsToRemove.push(child);
        }
        _results = [];
        for (_j = 0, _len1 = itemsToRemove.length; _j < _len1; _j++) {
          item = itemsToRemove[_j];
          _results.push(item.remove());
        }
        return _results;
      };

      RoomCanvas.prototype.activateCopyCanvas = function() {
        return paper.projects[0].activate();
      };

      RoomCanvas.prototype.activateNormalCanvas = function() {
        return paper.projects[1].activate();
      };

      RoomCanvas.prototype.restore = function(withComments) {
        var element, _i, _len, _ref, _results;
        _ref = opts.historytools.allHistory;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          if (!element.type) {
            if (element.isImage) {
              paper.project.activeLayer.insertChild(0, element);
            } else {
              paper.project.activeLayer.addChild(element);
            }
          }
          if (element.commentMin && withComments) {
            _results.push(room.comments.showComment(element.commentMin));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      RoomCanvas.prototype.setScale = function(scale) {
        var commentMax, element, finalScale, transformMatrix, _i, _len, _ref;
        finalScale = scale / opts.currentScale;
        opts.currentScale = scale;
        transformMatrix = new Matrix(finalScale, 0, 0, finalScale, 0, 0);
        paper.project.activeLayer.transform(transformMatrix);
        _ref = opts.historytools.allHistory;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          if (element.commentMin) {
            element.commentMin.css({
              top: element.commentMin.position().top * finalScale,
              left: element.commentMin.position().left * finalScale
            });
            commentMax = element.commentMin[0].$maximized;
            commentMax.css({
              top: commentMax.position().top * finalScale,
              left: commentMax.position().left * finalScale
            });
            room.comments.redrawArrow(element.commentMin);
          }
        }
        return room.redraw();
      };

      RoomCanvas.prototype.addScale = function() {
        return this.setScale(opts.currentScale + 0.1);
      };

      RoomCanvas.prototype.subtractScale = function() {
        return this.setScale(opts.currentScale - 0.1);
      };

      RoomCanvas.prototype.handleUpload = function(canvasId, fileId, emit) {
        var img;
        if (opts.image) {
          this.addNewThumbAndSelect(canvasId);
        }
        img = this.addImage(fileId);
        this.setImage(img);
        this.updateSelectedThumb();
        if (emit) {
          return room.socket.emit("fileAdded", {
            canvasId: canvasId,
            fileId: fileId
          });
        }
      };

      RoomCanvas.prototype.addImage = function(fileId, loadWrap) {
        var fakeImage, image, img, onload, src;
        src = "/files/" + ($("#pid").val()) + "/" + fileId;
        image = $("<img class='hide' src='" + src + "'>");
        $("body").append(image);
        fakeImage = new Image();
        fakeImage.src = "/images/blank.jpg";
        img = new Raster(fakeImage);
        img.isImage = true;
        paper.project.activeLayer.insertChild(0, img);
        img.fileId = fileId;
        opts.image = img;
        room.history.add(img);
        onload = function() {
          img.size.width = image.width();
          img.size.height = image.height();
          img.position = paper.view.center;
          return img.setImage(image[0]);
        };
        $(image).on("load", function() {
          if (loadWrap) {
            return loadWrap(img, function() {
              return onload();
            });
          } else {
            return onload();
          }
        });
        return img;
      };

      RoomCanvas.prototype.addNewThumb = function(canvasId) {
        var thumb;
        thumb = $("<a href='#' data-cid='" + canvasId + "'><canvas width='80' height='60'></canvas></a>");
        return $("#canvasSelectDiv").append(thumb);
      };

      RoomCanvas.prototype.addNewThumbAndSelect = function(canvasId) {
        this.erase();
        room.initOpts(canvasId);
        this.addNewThumb(canvasId);
        $("#canvasSelectDiv a").removeClass("canvasSelected");
        return $("#canvasSelectDiv a:last").addClass("canvasSelected");
      };

      RoomCanvas.prototype.updateThumb = function(canvasId) {
        var canvas, cvh, cvw, i, prevOpts, selectedCanvasId, shift, sy, th, thumb, thumbContext, transformMatrix, tw, _i;
        selectedCanvasId = this.getSelectedCanvasId();
        if (selectedCanvasId !== canvasId) {
          this.activateCopyCanvas();
          prevOpts = room.getOpts();
          room.setOpts(this.findCanvasOptsById(canvasId));
          this.clearCopyCanvas();
          this.restore(false);
        }
        thumb = this.findThumbByCanvasId(canvasId).find("canvas");
        thumbContext = thumb[0].getContext('2d');
        canvas = paper.project.view.element;
        cvw = $(canvas).width();
        cvh = $(canvas).height();
        tw = $(thumb).width();
        th = $(thumb).height();
        sy = th / cvh;
        transformMatrix = new Matrix(sy / opts.currentScale, 0, 0, sy / opts.currentScale, 0, 0);
        paper.project.activeLayer.transform(transformMatrix);
        room.redraw();
        shift = -((sy * cvw) - tw) / 2;
        thumbContext.clearRect(0, 0, tw, th);
        for (i = _i = 0; _i <= 5; i = ++_i) {
          thumbContext.drawImage(canvas, shift, 0);
        }
        transformMatrix = new Matrix(opts.currentScale / sy, 0, 0, opts.currentScale / sy, 0, 0);
        paper.project.activeLayer.transform(transformMatrix);
        room.redraw();
        if (prevOpts) {
          this.activateNormalCanvas();
          return room.setOpts(prevOpts);
        }
      };

      RoomCanvas.prototype.updateSelectedThumb = function() {
        return this.updateThumb(this.getSelectedCanvasId());
      };

      RoomCanvas.prototype.getSelectedCanvasId = function() {
        return this.getSelected().data("cid");
      };

      RoomCanvas.prototype.getSelected = function() {
        return $(".canvasSelected");
      };

      RoomCanvas.prototype.getThumbs = function() {
        return $("#canvasSelectDiv a");
      };

      RoomCanvas.prototype.findThumbByCanvasId = function(canvasId) {
        return $("#canvasSelectDiv a[data-cid='" + canvasId + "']");
      };

      RoomCanvas.prototype.selectThumb = function(anchor, emit) {
        var canvasOpts, cid;
        if ($(anchor).hasClass("canvasSelected")) {
          return;
        }
        $("#canvasSelectDiv a").removeClass("canvasSelected");
        cid = $(anchor).data("cid");
        canvasOpts = this.findCanvasOptsById(cid);
        if (!canvasOpts) {
          alert("No canvas opts by given canvasId=" + cid);
        }
        this.erase();
        room.setOpts(canvasOpts);
        this.restore(true);
        $(anchor).addClass("canvasSelected");
        if (emit) {
          room.socket.emit("switchCanvas", cid);
        }
        return room.redraw();
      };

      RoomCanvas.prototype.findCanvasOptsById = function(canvasId) {
        var savedOpt, _i, _len, _ref;
        _ref = room.savedOpts;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          savedOpt = _ref[_i];
          if (savedOpt.canvasId === canvasId) {
            return savedOpt;
          }
        }
        return null;
      };

      return RoomCanvas;

    })();
    return App.room.canvas = new RoomCanvas;
  });

}).call(this);
