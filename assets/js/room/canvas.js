// Generated by CoffeeScript 1.4.0
(function() {

  $(function() {
    var RoomCanvas;
    RoomCanvas = (function() {

      function RoomCanvas() {}

      RoomCanvas.prototype.clear = function() {
        var element, _i, _len, _ref;
        room.history.add({
          type: "clear",
          tools: room.history.getSelectableTools(),
          eligible: true
        });
        _ref = opts.historytools.allHistory;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          if (!element.type) {
            element.opacity = 0;
          }
          if (element.commentMin) {
            room.comments.hideComment(element.commentMin);
          }
        }
        room.items.unselect();
        room.redrawWithThumb();
        return room.socket.emit("eraseCanvas");
      };

      RoomCanvas.prototype.erase = function() {
        var element, _i, _len, _ref;
        _ref = opts.historytools.allHistory;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          if (!element.type) {
            element.remove();
          }
          if (element.commentMin) {
            room.comments.hideComment(element.commentMin);
          }
        }
        return room.redraw();
      };

      RoomCanvas.prototype.restore = function() {
        var element, _i, _len, _ref, _results;
        _ref = opts.historytools.allHistory;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          if (!this.type) {
            paper.project.activeLayer.addChild(element);
          }
          if (element.commentMin) {
            _results.push(room.comments.showComment(element.commentMin));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      RoomCanvas.prototype.setScale = function(scale) {
        var commentMax, element, finalScale, transformMatrix, _i, _len, _ref;
        finalScale = scale / opts.currentScale;
        opts.currentScale = scale;
        transformMatrix = new Matrix(finalScale, 0, 0, finalScale, 0, 0);
        paper.project.activeLayer.transform(transformMatrix);
        _ref = opts.historytools.allHistory;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          if (element.commentMin) {
            element.commentMin.css({
              top: element.commentMin.position().top * finalScale,
              left: element.commentMin.position().left * finalScale
            });
            commentMax = element.commentMin[0].$maximized;
            commentMax.css({
              top: commentMax.position().top * finalScale,
              left: commentMax.position().left * finalScale
            });
            room.comments.redrawArrow(element.commentMin);
          }
        }
        return room.redraw();
      };

      RoomCanvas.prototype.addScale = function() {
        return this.setScale(opts.currentScale + 0.1);
      };

      RoomCanvas.prototype.subtractScale = function() {
        return this.setScale(opts.currentScale - 0.1);
      };

      RoomCanvas.prototype.handleUpload = function(imagePath, emit) {
        var image,
          _this = this;
        image = new Image();
        image.src = imagePath;
        return $(image).on("load", function() {
          if (opts.image) {
            _this.addNewThumbAndSelect();
          }
          _this.addImage(image);
          _this.updateSelectedThumb();
          if (emit) {
            return room.socket.emit("fileAdded", imagePath);
          }
        });
      };

      RoomCanvas.prototype.addImage = function(image) {
        var img;
        img = new Raster(image);
        img.isImage = true;
        paper.project.activeLayer.insertChild(0, img);
        img.size.width = image.width;
        img.size.height = image.height;
        img.position = paper.view.center;
        opts.image = image;
        return room.history.add(img);
      };

      RoomCanvas.prototype.addNewThumb = function() {
        var thumb;
        thumb = $("<a href='#'><canvas width='80' height='60'></canvas></a>");
        return $("#canvasSelectDiv").append(thumb);
      };

      RoomCanvas.prototype.addNewThumbAndSelect = function() {
        this.erase();
        room.initOpts();
        this.addNewThumb();
        $("#canvasSelectDiv a").removeClass("canvasSelected");
        return $("#canvasSelectDiv a:last").addClass("canvasSelected");
      };

      RoomCanvas.prototype.updateThumb = function(canvasIndex) {
        var canvas, cvh, cvw, i, shift, sy, th, thumb, thumbContext, transformMatrix, tw, _i;
        thumb = $("#canvasSelectDiv a:eq(" + canvasIndex + ") canvas");
        thumbContext = thumb[0].getContext('2d');
        canvas = paper.project.view.element;
        cvw = $(canvas).width();
        cvh = $(canvas).height();
        tw = $(thumb).width();
        th = $(thumb).height();
        sy = th / cvh;
        transformMatrix = new Matrix(sy / opts.currentScale, 0, 0, sy / opts.currentScale, 0, 0);
        paper.project.activeLayer.transform(transformMatrix);
        room.redraw();
        shift = -((sy * cvw) - tw) / 2;
        thumbContext.clearRect(0, 0, tw, th);
        for (i = _i = 0; _i <= 5; i = ++_i) {
          thumbContext.drawImage(canvas, shift, 0);
        }
        transformMatrix = new Matrix(opts.currentScale / sy, 0, 0, opts.currentScale / sy, 0, 0);
        paper.project.activeLayer.transform(transformMatrix);
        return room.redraw();
      };

      RoomCanvas.prototype.updateSelectedThumb = function() {
        return this.updateThumb(this.selectedThumbCanvasIndex());
      };

      RoomCanvas.prototype.selectedThumbCanvasIndex = function() {
        return $(".canvasSelected").index();
      };

      RoomCanvas.prototype.selectThumbByCanvasIndex = function(canvasIndex, emit) {
        return this.selectThumb($("#canvasSelectDiv a:eq(" + canvasIndex + ")"), emit);
      };

      RoomCanvas.prototype.selectThumb = function(anchor, emit) {
        var canvasOpts, index;
        if ($(anchor).hasClass("canvasSelected")) {
          return;
        }
        $("#canvasSelectDiv a").removeClass("canvasSelected");
        index = $(anchor).index();
        canvasOpts = this.findCanvasOptsByIndex(index);
        if (!canvasOpts) {
          alert("No canvas opts by given index=" + index);
        }
        this.erase();
        room.setOpts(canvasOpts);
        this.restore();
        $(anchor).addClass("canvasSelected");
        if (emit) {
          room.socket.emit("switchCanvas", $(anchor).index());
        }
        return room.redraw();
      };

      RoomCanvas.prototype.findCanvasOptsByIndex = function(index) {
        var i, savedOpt, _i, _len, _ref;
        _ref = room.savedOpts;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          savedOpt = _ref[i];
          if (index === i) {
            return savedOpt;
          }
        }
        return null;
      };

      return RoomCanvas;

    })();
    return App.room.canvas = new RoomCanvas;
  });

}).call(this);
