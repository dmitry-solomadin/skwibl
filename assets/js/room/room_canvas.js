// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    var RoomCanvas;
    RoomCanvas = (function(_super) {

      __extends(RoomCanvas, _super);

      function RoomCanvas() {
        return RoomCanvas.__super__.constructor.apply(this, arguments);
      }

      RoomCanvas.prototype.clear = function() {
        var element, _i, _len, _ref;
        this.room().history.add({
          type: "clear",
          tools: this.room().history.getSelectableTools(),
          eligible: true
        });
        _ref = this.opts().historytools.allHistory;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          if (!element.type) {
            element.opacity = 0;
          }
          if (element.commentMin) {
            this.room().comments.hideComment(element.commentMin);
          }
        }
        this.room().items.unselect();
        this.room().redrawWithThumb();
        return this.room().socket.emit("eraseCanvas");
      };

      RoomCanvas.prototype.erase = function() {
        var element, _i, _len, _ref;
        _ref = this.opts().historytools.allHistory;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          if (!element.type) {
            element.remove();
          }
          if (element.commentMin) {
            this.room().comments.hideComment(element.commentMin);
          }
        }
        return this.room().redraw();
      };

      RoomCanvas.prototype.restore = function() {
        var element, _i, _len, _ref, _results;
        _ref = this.opts().historytools.allHistory;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          if (!this.type) {
            paper.project.activeLayer.addChild(element);
          }
          if (element.commentMin) {
            _results.push(this.room().comments.showComment(element.commentMin));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      RoomCanvas.prototype.setScale = function(scale) {
        var commentMax, element, finalScale, transformMatrix, _i, _len, _ref;
        finalScale = scale / this.opts().currentScale;
        this.opts().currentScale = scale;
        transformMatrix = new Matrix(finalScale, 0, 0, finalScale, 0, 0);
        paper.project.activeLayer.transform(transformMatrix);
        _ref = this.opts().historytools.allHistory;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          if (element.commentMin) {
            element.commentMin.css({
              top: element.commentMin.position().top * finalScale,
              left: element.commentMin.position().left * finalScale
            });
            commentMax = element.commentMin[0].$maximized;
            commentMax.css({
              top: commentMax.position().top * finalScale,
              left: commentMax.position().left * finalScale
            });
            this.room().comments.redrawArrow(element.commentMin);
          }
        }
        return this.room().redraw();
      };

      RoomCanvas.prototype.addScale = function() {
        return this.setScale(this.opts().currentScale + 0.1);
      };

      RoomCanvas.prototype.subtractScale = function() {
        return this.setScale(this.opts().currentScale - 0.1);
      };

      RoomCanvas.prototype.handleUpload = function(image) {
        if (this.opts().image) {
          this.addNewThumb();
        }
        this.addImage(image);
        return this.updateSelectedThumb();
      };

      RoomCanvas.prototype.addImage = function(image) {
        var img;
        img = new Raster(image);
        img.isImage = true;
        paper.project.activeLayer.insertChild(0, img);
        img.size.width = image.width;
        img.size.height = image.height;
        img.position = paper.view.center;
        this.opts().image = image;
        return this.room().history.add(img);
      };

      RoomCanvas.prototype.addNewThumb = function() {
        this.erase();
        this.room().opts = {};
        this.room().initOpts(this.opts());
        this.room().savedOpts.push(this.opts());
        $("#canvasSelectDiv a").removeClass("canvasSelected");
        return $("#canvasSelectDiv").append("<a href='#' class='canvasSelected'><canvas width='80' height='60'></canvas></a>");
      };

      RoomCanvas.prototype.updateSelectedThumb = function() {
        var canvas, cvh, cvw, i, sch, scw, selectedCanvas, selectedContext, shift, sy, transformMatrix, _i;
        selectedCanvas = $(".canvasSelected canvas");
        selectedContext = selectedCanvas[0].getContext('2d');
        canvas = paper.project.view.element;
        cvw = $(canvas).width();
        cvh = $(canvas).height();
        scw = $(selectedCanvas).width();
        sch = $(selectedCanvas).height();
        sy = sch / cvh;
        transformMatrix = new Matrix(sy / this.opts().currentScale, 0, 0, sy / this.opts().currentScale, 0, 0);
        paper.project.activeLayer.transform(transformMatrix);
        this.room().redraw();
        shift = -((sy * cvw) - scw) / 2;
        selectedContext.clearRect(0, 0, scw, sch);
        for (i = _i = 0; _i <= 5; i = ++_i) {
          selectedContext.drawImage(canvas, shift, 0);
        }
        transformMatrix = new Matrix(this.opts().currentScale / sy, 0, 0, this.opts().currentScale / sy, 0, 0);
        paper.project.activeLayer.transform(transformMatrix);
        return this.room().redraw();
      };

      RoomCanvas.prototype.selectThumb = function(anchor) {
        var canvasOpts, index;
        if ($(anchor).hasClass("canvasSelected")) {
          return;
        }
        $("#canvasSelectDiv a").removeClass("canvasSelected");
        index = $(anchor).index();
        canvasOpts = this.findCanvasOptsByIndex(index);
        if (!canvasOpts) {
          alert("No canvas opts by given index=" + index);
        }
        this.erase();
        this.room().opts = canvasOpts;
        this.restore();
        return $(anchor).addClass("canvasSelected");
      };

      RoomCanvas.prototype.findCanvasOptsByIndex = function(index) {
        var i, opts, _i, _len, _ref;
        _ref = this.room().savedOpts;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          opts = _ref[i];
          if (index === i) {
            return opts;
          }
        }
        return null;
      };

      return RoomCanvas;

    })(App.RoomComponent);
    return App.room.canvas = new RoomCanvas;
  });

}).call(this);
