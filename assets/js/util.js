// Generated by CoffeeScript 1.4.0
(function() {

  $(function() {
    $.fn.combinedHover = function(settings) {
      var addHoverCount, additionalTriggers, removeHoverCount, trigger, updateHoverCount;
      trigger = this;
      additionalTriggers = settings.additionalTriggers;
      trigger[0].hovercount = 0;
      updateHoverCount = function(toAdd) {
        return trigger[0].hovercount = trigger[0].hovercount + toAdd;
      };
      addHoverCount = function() {
        return updateHoverCount(1);
      };
      removeHoverCount = function() {
        var offTrigger;
        updateHoverCount(-1);
        offTrigger = function() {
          if (trigger[0].hovercount === 0) {
            return settings.offTrigger();
          }
        };
        return setTimeout(offTrigger, 100);
      };
      if (settings.live) {
        $(document).on('mouseenter', additionalTriggers, function() {
          return addHoverCount();
        }).on('mouseleave', additionalTriggers, function() {
          return removeHoverCount();
        });
      } else {
        additionalTriggers.on('mouseenter', function() {
          return addHoverCount();
        }).on('mouseleave', function() {
          return removeHoverCount();
        });
      }
      return trigger.on('mouseenter', function() {
        addHoverCount();
        return settings.onTrigger();
      }).on('mouseleave', function() {
        return removeHoverCount();
      });
    };
    return $.fn.drags = function(opt) {
      var _this = this;
      opt = $.extend({
        cursor: "move"
      }, opt);
      $(document).on("mousemove", function(e) {
        var dx, dy;
        if (!_this.hasClass("draggable")) {
          return;
        }
        if (!_this.data("pdx")) {
          _this.data("pdx", e.clientX);
          return _this.data("pdy", e.clientY);
        } else {
          dx = e.clientX - parseInt(_this.data("pdx"));
          dy = e.clientY - parseInt(_this.data("pdy"));
          _this.data("pdx", e.clientX);
          _this.data("pdy", e.clientY);
          return opt.onDrag(dx, dy);
        }
      });
      $(document).on("mouseup", function(e) {
        var draggedObject;
        if (!_this.hasClass("draggable")) {
          return;
        }
        draggedObject = $('.draggable');
        if (draggedObject[0] && opt.onAfterDrag) {
          opt.onAfterDrag(draggedObject[0]);
        }
        return draggedObject.removeClass('draggable');
      });
      this.css('cursor', opt.cursor).on("mousedown", function(e) {
        _this.addClass('draggable');
        _this.data("pdx", "");
        _this.data("pdy", "");
        return e.preventDefault();
      });
      return this;
    };
  });

  window.isMac = function() {
    return /Mac/.test(navigator.userAgent);
  };

  window.currentPage = function(template) {
    return $("#currentTemplate").val() === template;
  };

}).call(this);
