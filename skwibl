#!/bin/bash


## dynamic server
DYN='app'

## socket server
SOC='server'

## coffee executable
COFFEE='node_modules/coffee-script/bin/coffee'

## coffee dir
COFFEE_DIR='assets/coffee/'

## coffee output
JS_OUTPUT_DIR='assets/js'

## uploads dir
UPLOADS_DIR='uploads'

## patches dir
PATCHES_DIR='patches'

## node modules dir
MODULES_DIR='node_modules'

## external server configurations dir
EXTERNAL='external'

## hetzner IP
IP='88.198.192.88'

## hertzner password
PASSWORD='fuThoh5eipe8'

## temporary file template
TMP_TEMPLATE='~'

## node execution command
NODE_CMD='node --nouse-idle-notification --expose-gc'

## coffee execution command
COFFEE_OPT='--nodejs "--nouse-idle-notification --expose-gc"'

## node debug command for dynamic server
DEBUG_CMD="node --debug $DYN.js & node-inspector &"

## redis flush command
FLUSH_REDIS_CMD='redis-cli flushall'

## usage string
USAGE="Usage: $0 -a -b -c -d -e -i -p -r -s -u -h \n\n
      -a --dynamic Start dynamic server \n
      -b --build Build the project \n
      -c --clean Clean the project auxiliary files \n
      -d --deploy Deploy the project \n
      -e --debug Run skwibl in debug mode \n
      -i --init Init the project \n
      -o --connect Connect to the production skwibl service through ssh \n
      -p --product Run skwibl in production mode \n
      -r --reset Reset the project \n
      -s --socket Start socket server \n
      -u --update Update project dependencies \n\n
      -h --help This prompt \n"

## patch procedure
function patch {
  echo "patching"
  cp -Rf $PATCHES_DIR/* $MODULES_DIR
}

## check if coffee is installed
if [ ! -e $COFFEE ]; then
  npm install -d
  patch
fi

## clean procedure
function clean {
  echo "cleaning"
  find ./ -name \*$TMP_TEMPLATE -delete
  rm -f *.js
  find ./assets -name "*.js" -delete
  find ./config -name "*.js" -delete
  find ./controllers -name "*.js" -delete
  find ./db -name "*.js" -delete
  find ./helpers -name "*.js" -delete
  find ./routes -name "*.js" -delete
  find ./setup -name "*.js" -delete
  find ./smtp -name "*.js" -delete
  find ./sockets -name "*.js" -delete
  find ./tools -name "*.js" -delete
}

## build procedure
function build {
  echo "building"
  $COFFEE -w -o $JS_OUTPUT_DIR $COFFEE_DIR &
}

function build_deploy {
  echo "building"
  $COFFEE -c -o $JS_OUTPUT_DIR $COFFEE_DIR &
}

## init procedure
function init {
  echo "init project directories"
  if [ ! -e $UPLOADS_DIR ]; then
    mkdir $UPLOADS_DIR
  fi
}

## reset procedure
function reset {
  echo "resetting"
  rm -rf $MODULES_DIR
  rm -rf $UPLOADS_DIR
  # Uncomment next line when switch to coffee
#   rm -f $JS_OUTPUT_DIR/*.*
  eval $FLUSH_REDIS_CMD
  npm install -d
  patch
#   sudo nginx -s stop
#   mkdir -p /etc/haproxy
#   sudo update-rc.d haproxy remove
#   sudo cp -f $EXTERNAL/nginx.conf /etc/nginx/
#   sudo cp -f $EXTERNAL/haproxy.cfg /etc/haproxy/
#   sudo cp -f $EXTERNAL/haproxy /etc/init.d/
#   sudo update-rc.d haproxy defaults
#   sudo nginx
#   sudo service haproxy restart
}

## start dynamic server
function startDyn {
  echo "starting dynamic"
  eval "$COFFEE $DYN.coffee $COFFEE_OPT"
}

## start socket server
function startSocket {
  echo "starting sockets"
  eval "$COFFEE $SOC.coffee $COFFEE_OPT"
}

## run in production procedure
function product {
  echo "production starting"
  eval "NODE_ENV=production $NODE_CMD $DYN.js & NODE_ENV=production  $NODE_CMD $SOC.js"
}

## connect procedure
function connect {
  sshpass -p $PASSWORD ssh root@$IP
}

## deploy procedure
function deploy {
  echo "deploing"
  TOOLS_FILE="./tools/tools.coffee"
  mv $TOOLS_FILE $TOOLS_FILE.save
  sed 's/#  / /g' $TOOLS_FILE.save  > $TOOLS_FILE
  $COFFEE -c -o $JS_OUTPUT_DIR $COFFEE_DIR &
  find ./ -name "*.coffee" -exec $COFFEE -cb {} \;
  find ./assets/coffee -name "*.js" -delete
  rm -f $TOOLS_FILE
  mv $TOOLS_FILE.save $TOOLS_FILE
  sshpass -p $PASSWORD rsync ./pass.rsync -rvuz ./ root@$IP:/var/www/skwibl/ --exclude '.git' --exclude "*.coffee" --exclude "vendor/socket.io/socket.io.js"
}

## debug procedure
function debug {
  echo "debugg starting"
  eval $DEBUG_CMD
}

## update procedure
function update {
  echo "updating"
  npm install -d
  npm update
  patch
}

case "$1" in
  -a|--dynamic)
    init
    build
    startDyn
    exit 0;;
  -b|--build)
    build
    exit 0;;
  -c|--clean)
    clean
    exit 0;;
  -d|--deploy)
    clean
    init
    build_deploy
    deploy
    clean
    exit 0;;
  -e|--debug)
    init
    build
    debug;;
  -i|--init)
    init
    exit 0;;
  -o|--connect)
    connect;;
  -p|--product)
    init
    build
    product;;
  -r|--reset)
    read -p "You are going to reset project files and flush db. Do you want to continue (y/n)?" REPLY
    if [ $REPLY == 'y' ]; then
      clean
      reset
    fi
    exit 0;;
  -s|--socket)
    startSocket
    exit 0;;
  -u|--update)
    update
    exit 0;;
  -h|--help)
    echo -e $USAGE
    exit 0;;
  "?")
    echo "Invalid option $OPTARG. Try $0 -h for help"
    exit 1;;
  *)
    echo "Unknown error while processing options"
    exit 1;;
esac
